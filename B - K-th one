#include <bits/stdc++.h>
using namespace std;

long long a[100005],tree[4*100000];

void build(int id, int l, int r){
    if(l == r){ 
        tree[id] = a[l];
        return ;
    }

    int mid = l+r >> 1;
    build(2*id,l,mid);
    build(2*id+1,mid+1,r);

    tree[id] = tree[2*id] + tree[2*id+1];
}

void update(int id, int l,int r,int i){
    if(i < l || i > r){
        return;
    }
    if(l == r){
        tree[id] = tree[id] ^ 1;
        a[l] = a[l] ^ 1;
        return ;
    }

    int mid = l+r >> 1;
    update(2*id,l,mid,i);
    update(2*id+1,mid+1,r,i);

    tree[id] = tree[2*id] + tree[2*id+1];

}

int find_k(int id,int l,int r,int k){

    if(r == l){
        return l-1; 
    }

    int mid = l+r >> 1;
    if(k < tree[2*id]){
        return find_k(2*id,l,mid,k); 
    }
    else{
        return find_k(2*id+1,mid+1,r,k - tree[2*id]);
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
 
    // freopen("P2S2.inp","r",stdin);
    // freopen("P2S2.out","w",stdout);

    int n,m,task,k;

    cin>>n>>m;

    for(int i=1;i<=n;i++){
        cin>>a[i];
    }

    build(1,1,n);

    while(m--){
        cin>>task>>k;
        if(task == 1){
            k++;
            update(1,1,n,k);
        }
        else{
            cout<<find_k(1,1,n,k)<<endl;
        }
    }
    return 0;
}
