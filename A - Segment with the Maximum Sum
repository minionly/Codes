#include <bits/stdc++.h>
using namespace std;

//^ construct a node for the nodes
struct node{
    long long pre,suf,sum,max_sum;
    static node merge(node a, node b){
        node n;
        n.pre = max(a.pre,a.sum + b.pre); 
        n.suf = max(b.suf,b.sum + a.suf);
        n.sum = a.sum + b.sum;
        n.max_sum = max(a.suf + b.pre, max(a.max_sum,b.max_sum));

        return n;
    }   
};

long long a[100000];
node tree[4*100000];

void build(int id,int l,int r){
    if(l == r){
        tree[id] = {a[l],a[l],a[l],a[l]};
        return;
    }

    int mid = l+r >> 1;
    build(2*id,l,mid);
    build(2*id+1,mid+1,r);

    tree[id] = node::merge(tree[2*id],tree[2*id+1]);
}

void update(int id,int l,int r,int i,int val){
    if(i <l || i > r){
        return;
    }
    if(l == r){
        tree[id] = {val,val,val,val};
        return;
    }

    int mid = l+r >> 1;
    update(2*id,l,mid,i,val);
    update(2*id+1,mid+1,r,i,val);

    tree[id] = node::merge(tree[2*id],tree[2*id+1]);
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    // freopen("P2S1.inp","r",stdin);
    // freopen("P2S1.out","w",stdout);

    int n,m,i,v;

    //TODO: place value v into index i and return max sum of sub_segment
    
    cin>>n>>m;

    for(int i=1;i<=n;i++){
        cin>>a[i];
    }

    build(1,1,n);

    cout<<max((long long)0,tree[1].max_sum)<<endl;

    while(m--){
        cin>>i>>v;
        i++;
        update(1,1,n,i,v);
        cout<<max((long long)0,tree[1].max_sum)<<endl;
    }

    return 0;
}
