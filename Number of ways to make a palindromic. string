/**
 * @attention
 * idea: 
 * for each s[i] = s[j], a new palindromic string will form.
 * Thus, the number of ways to make string s palindromic is:
 *    dp[i][j] = dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1] + dp[i+1][j-1] + 1;
 *    dp[i][j] = dp[i+1][j] + dp[i][j-1] + 1;
 * We check the 2 cases:
 *    Removing the i-th character: dp[i+1][j]
 *    Removing the h-th character: dp[i][j-1]
 * But adding these two together will cause making the substring dp[i+1][j-1] appear twice.
 * So we subtract it 1 time:  -dp[i+1][j-1]
 * But if s[i] == s[j] then all palindromic substrings in the range s[i+1....j-1] will form a substring with s[i] and s[j].
 * So we add it 1 time: +dp[i+1][j-1]
 * Then we add 1 because s[i] and s[j] from a palindromic substring it self with out any character in between.
 * 
 * If s[i] != s[j], we simply sum up the number of substring from range i to j using the following expression:
 *    dp[i][j] = dp[i+1][j] + dp[i][j-1] - dp[i+1][j+1];
 * we check the 2 cases: 
 *    Removing the i-th element: dp[i+1][j]
 *    Removing the i-th element: dp[i][j-1]
 * Then we subtract the range i+1 to j-1 since we added it twice:
 *    -dp[i+1][j+1]
 */

#include <bits/stdc++.h>
using namespace std;

string f[125][125];

string add(string s1, string s2){
  if(s1.size() < s2.size()){
    s1.insert(0,s2.size()-s1.size(),'0');
  }
  else if(s1.size() > s2.size()){
    s2.insert(0,s1.size() - s2.size(),'0');
  }
  int r=0,sum=0;
  string ans="";
  for(int i=s1.size()-1;i>=0;i--){
    sum = s1[i]-48 + s2[i]-48 + r;
    ans = char(sum%10+48) + ans;
    r = sum / 10;
  }
  if(r > 0){
    ans = char(r+48) + ans;
  }
  while(ans.size() > 1 && ans[0] == '0'){
    ans.erase(0,1);
  }
  return ans;
}

string sub(string s1, string s2){
  if(s1.size() < s2.size()){
    s1.insert(0,s2.size()-s1.size(),'0');
  }
  else if(s1.size() > s2.size()){
    s2.insert(0,s1.size() - s2.size(),'0');
  }

  int r = 0,dif=0;
  string ans = "";
  for(int i=s1.size()-1;i>=0;i--){
    dif = 10 + s1[i] - s2[i] - r;
    r = (s1[i] < s2[i] + r);
    // cout<<dif<<' '<<r<<endl;
    ans = char(dif % 10 + 48) + ans;
  }

  if(r > 0){
    ans[0] -= 49;
  }

  while(ans.size() > 1 && ans[0] == '0'){
    ans.erase(0,1);
  }
  return ans;

}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  freopen("main.inp","r",stdin);
  freopen("main.out","w",stdout);

  /*
    * Count the number of ways of deletion 
    * to make this string palindromic
  */

  string s;
  cin>>s;  

  for(int i=0;i<=120;i++){
    for(int j=0;j<=120;j++){
      f[i][j] = "0";
    }
  }

  for(int i=s.size();i>0;i--){
    f[i][i] = "1";
    for(int j=i+1;j<=s.size();j++){
      if(s[i-1] == s[j-1]){
        // f[i][j] = f[i+1][j] + f[i][j-1] + 1;
        f[i][j] = add(f[i][j],f[i+1][j]);
        f[i][j] = add(f[i][j],f[i][j-1]);
        f[i][j] = add(f[i][j],"1");
      }
      else{
        // f[i][j] = f[i][j-1] + f[i+1][j] - f[i+1][j-1];
        f[i][j] = add(f[i][j],f[i][j-1]);
        f[i][j] = add(f[i][j],f[i+1][j]);
        f[i][j] = sub(f[i][j],f[i+1][j-1]);
      }
    }
  }

  cout<<f[1][s.size()];

  return 0;
}
/**
⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⣠⣴⣶⣿⣿⣷⣶⣄⣀⣀⠀⠀
⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⣰⣾⣿⣿⡿⢿⣿⣿⣿⣿⣿⣿⣿⣷⣦⡀⠀⠀
⠀⠀⠀⠀⠀⠀ ⠀⢀⣾⣿⣿⡟⠁⣰⣿⣿⣿⡿⠿⠻⠿⣿⣿⣿⣿⣧
⠀⠀⠀⠀⠀ ⠀⠀⣾⣿⣿⠏⠀⣴⣿⣿⣿⠉⠀⠀⠀⠀⠀⠈⢻⣿⣿⣇
⠀⠀⠀⠀  ⣠⣼⣿⣿⡏⠀⢠⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⡀
⠀⠀⠀ ⣰⣿⣿⣿⣿⣿⡇⠀⢸⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⡇
⠀⠀ ⢰⣿⣿⡿⣿⣿⣿⡇⠀⠘⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⢀⣸⣿⣿⣿⠁
⠀  ⣿⣿⣿⠁⣿⣿⣿⡇⠀⠀⠻⣿⣿⣿⣷⣶⣶⣶⣶⣶⣿⣿⣿⣿⠃
  ⢰⣿⣿⡇⠀⣿⣿⣿⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀
  ⢸⣿⣿⡇⠀⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠉⠛⠛⠛⠉⢉⣿⣿⠀⠀⠀⠀
  ⢸⣿⣿⣇⠀⣿⣿⣿⠀⠀⠀⠀⠀⢀⣤⣤⣤⡀⠀⠀⢸⣿⣿⣿⣷⣦⠀
   ⢻⣿⣿⣶⣿⣿⣿⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣦⡀⠀⠉⠉⠻⣿⣿⡇
     ⠛⠿⣿⣿⣿⣿⣷⣤⡀⠀⠀⠀⠀⠈⠹⣿⣿⣇⣀ ⣠⣾⣿⣿⡇
          ⠹⣿⣿⣿⣿⣦⣤⣤⣤⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀
              ⠉⠻⢿⣿⣿⣿⣿⣿⣿⠿⠋⠉⠛⠋⠉⠉⠁⠀
⠀                 ⠈⠉⠉⠉⠁
**/
