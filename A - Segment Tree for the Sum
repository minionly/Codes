#include <bits/stdc++.h>
using namespace std;

long long tree[4*100000],a[100000];

void build(int id, int l, int r){
    if(l == r){
        tree[id] = a[l];
        return;
    }

    int mid = l+r >> 1;
    build(2*id,l,mid);
    build(2*id+1,mid+1,r);
    tree[id] = tree[2*id] + tree[2*id+1];

}

void update(int id, int l, int r, int i, int val){
    if(i < l || i > r){
        return;
    }

    if(l == r){
        tree[id] = val;
        return;
    }

    int mid = (l+r)/2; 
    update(2 * id,l,mid,i,val);
    update(2 * id + 1,mid+1,r,i,val);

    tree[id] = tree[2 * id] + tree[id * 2 + 1];
}

long long get(int id, int l, int r, int u, int v){
    if(v < l || u > r){
        return 0;
    }
    if(l >= u && r <= v){
        return tree[id];
    }
    
    int mid = (l+r)/2;
    long long get1 = get(2 * id,l,mid,u,v);
    long long get2 = get(2 * id + 1,mid+1,r,u,v);

    return get1 + get2;
}


int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    // freopen("P1S1.inp","r",stdin);
    // freopen("P1S1.out","w",stdout);

    int n,q,task,x,y;
    //TODO_1 : append y to position x
    //TODO_2 : return sum in rage [u,v]

    cin>>n>>q;
    
    for(int i=1;i<=n;i++){
        cin>>a[i];
    }

    build(1,1,n);

    while(q--){
        cin>>task>>x>>y;
        x++;
        if(task == 1){
            update(1,1,n,x,y);
        }
        else{
            cout<<get(1,1,n,x,y)<<endl;
        }
    }

    return 0;
}
