#include <bits/stdc++.h>
using namespace std;

struct node{
    int min,max,root;
};

node dsu[300005];
int sz[300005];

void make_sets(int n){
    for(int i=1;i<=n;i++){
        dsu[i] = {i,i,i};
        sz[i] = 1;
    }
}

node find(int u){
    if(dsu[u].root == u){
        return dsu[u];
    }

    node f = find(dsu[u].root);
    dsu[f.root].min = min(dsu[f.root].min, dsu[u].min);
    dsu[f.root].max = max(dsu[f.root].max, dsu[u].max);
    dsu[u].root = f.root;

    return dsu[u];
}

void unify(int u, int v){
    node f1 = find(u);
    node f2 = find(v);

    if(f1.root == f2.root){
        return;
    }

    if(sz[f2.root] > sz[f1.root]){
        swap(f1,f2);
    }
    sz[f1.root] += sz[f2.root];
    dsu[f1.root].min = min(dsu[f1.root].min,dsu[f2.root].min);
    dsu[f1.root].max = max(dsu[f1.root].max,dsu[f2.root].max);
    dsu[f2.root].root = dsu[f1.root].root;

}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    freopen("main.inp","r",stdin);
    freopen("main.out","w",stdout);

    int n,m;
    string s;

    cin>>n>>m;

    make_sets(n);

    while(m--){
        cin>>s;
        if(s[0] == 'u'){
            int u,v;
            cin>>u>>v;
            unify(u,v);
        }
        else{
            int u;
            cin>>u;
            node f = find(u);
            cout<<dsu[f.root].min<<' '<<dsu[f.root].max<<' '<<sz[f.root]<<endl;
        }
    }

    return 0;
}
/**
⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⣠⣴⣶⣿⣿⣷⣶⣄⣀⣀⠀⠀
⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⣰⣾⣿⣿⡿⢿⣿⣿⣿⣿⣿⣿⣿⣷⣦⡀⠀⠀
⠀⠀⠀⠀⠀⠀ ⠀⢀⣾⣿⣿⡟⠁⣰⣿⣿⣿⡿⠿⠻⠿⣿⣿⣿⣿⣧
⠀⠀⠀⠀⠀ ⠀⠀⣾⣿⣿⠏⠀⣴⣿⣿⣿⠉⠀⠀⠀⠀⠀⠈⢻⣿⣿⣇
⠀⠀⠀⠀  ⣠⣼⣿⣿⡏⠀⢠⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⡀
⠀⠀⠀ ⣰⣿⣿⣿⣿⣿⡇⠀⢸⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⡇
⠀⠀ ⢰⣿⣿⡿⣿⣿⣿⡇⠀⠘⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⢀⣸⣿⣿⣿⠁
⠀  ⣿⣿⣿⠁⣿⣿⣿⡇⠀⠀⠻⣿⣿⣿⣷⣶⣶⣶⣶⣶⣿⣿⣿⣿⠃
  ⢰⣿⣿⡇⠀⣿⣿⣿⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀
  ⢸⣿⣿⡇⠀⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠉⠛⠛⠛⠉⢉⣿⣿⠀⠀⠀⠀
  ⢸⣿⣿⣇⠀⣿⣿⣿⠀⠀⠀⠀⠀⢀⣤⣤⣤⡀⠀⠀⢸⣿⣿⣿⣷⣦⠀
   ⢻⣿⣿⣶⣿⣿⣿⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣦⡀⠀⠉⠉⠻⣿⣿⡇
     ⠛⠿⣿⣿⣿⣿⣷⣤⡀⠀⠀⠀⠀⠈⠹⣿⣿⣇⣀ ⣠⣾⣿⣿⡇
          ⠹⣿⣿⣿⣿⣦⣤⣤⣤⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀
              ⠉⠻⢿⣿⣿⣿⣿⣿⣿⠿⠋⠉⠛⠋⠉⠉⠁⠀
⠀                 ⠈⠉⠉⠉⠁
**/
