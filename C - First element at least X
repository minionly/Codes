#include <bits/stdc++.h>
using namespace std;

long long a[100005],tree[4*100000];

void build(int id, int l, int r){
    if(l == r){
        tree[id] = a[l];
        return;
    }

    int mid = l+r >> 1;
    build(2*id,l,mid);
    build(2*id+1,mid+1,r);

    tree[id] = max(tree[2*id],tree[2*id+1]);
}

void update(int id, int l, int r, int i, int v){
    if(i < l || i > r){
        return;
    }
    if(l == r){
        tree[id] = v;
        return;
    }

    int mid = l+r >> 1;
    update(2*id,l,mid,i,v);
    update(2*id+1,mid+1,r,i,v);

    tree[id] = max(tree[2*id],tree[2*id+1]);
}

int first_above(int id, int l, int r, int x){
    if(l == r){
        return l-1;
    }

    int mid = l+r >> 1;
    if(tree[2*id] >= x){
        return first_above(2*id,l,mid,x);
    } 
    else{
        return first_above(2*id+1,mid+1,r,x);
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    // freopen("P2S3.inp","r",stdin);
    // freopen("P2S3.out","w",stdout);

    int n,m,task,i,v;

    cin>>n>>m;

    for(int i=1;i<=n;i++){
        cin>>a[i];
    }

    build(1,1,n);

    while(m--){
        cin>>task;
        if(task == 1){
            cin>>i>>v;
            i++;
            update(1,1,n,i,v);
        }
        else{
            cin>>v;
            // int ans = first_above(1,1,n,v);
            // if(ans == INT_MAX){
            //     cout<<-1<<endl;
            // }
            // else{
            //     cout<<ans<<endl;

            // }
            if(tree[1] < v){
                cout<<-1<<endl;
            }
            else{
                cout<<first_above(1,1,n,v)<<endl;
            }
        }
    }

    return 0;
}
