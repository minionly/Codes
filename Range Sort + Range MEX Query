#include <bits/stdc++.h>
using namespace std;
#define endl '\n' 
/**
* IDEA:
*/

const int kn = 3e5 + 1;
int tree[31][4 * kn], lazy[31][4 * kn];

void propagate(int id, int l, int r, int i){
    if(!lazy[i][id]){
        return;
    }
    tree[i][id] = (r - l + 1) * (lazy[i][id]-1);
    if(l < r){
        lazy[i][id << 1] = lazy[i][id << 1 | 1] = lazy[i][id];
    }
    lazy[i][id] = 0;
}


void update(int id, int l, int r, int u, int v, int val, int i){
    propagate(id, l, r, i);
    if(r < u || l > v){
        return;
    }
    if(u <= l && r <= v){
        lazy[i][id] = val + 1;
        propagate(id, l, r, i);
        return;
    }
    int mid = l + r >> 1;
    update(id << 1, l, mid, u, v, val, i);
    update(id << 1 | 1, mid+1, r, u, v, val, i);

    tree[i][id] = tree[i][id << 1] + tree[i][id << 1 | 1];
}

int get(int id, int l, int r, int u, int v, int i){
    propagate(id, l, r, i);
    if(r < u || l > v){
        return 0;
    }
    if(u <= l && r <= v){
        return tree[i][id];
    }
    int mid = l + r >> 1;
    return get(id << 1, l, mid, u, v, i) + get(id << 1 | 1, mid+1, r, u, v, i);

}   

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    freopen("mexquery.inp","r",stdin);
    freopen("mexquery.out","w",stdout);

    int n, q;

    cin>>n;

    for(int i=1;i<=n;++i){
        int x;
        cin>>x;
        update(1, 1, n, i, i, 1, x);
    }

    cin>>q;

    while(q--){
        int t, l, r;
        cin>>t>>l>>r;
        if(t == 1){
            int ty;
            cin>>ty;
            if(ty == 1){
                int u = l;
                for(int i=0;i<=30;++i){
                    int c = get(1, 1, n, l, r, i);
                    if(c == 0){
                        continue;
                    }
                    update(1, 1, n, l, r, 0, i);
                    update(1, 1, n, u, u+c-1, 1, i);
                    u += c;
                }
            }
            else{
                int u = l;
                for(int i=30;i>=0;--i){
                    int c = get(1, 1, n, l, r, i);
                    if(c == 0){
                        continue;
                    }
                    update(1, 1, n, l, r, 0, i);
                    update(1, 1, n, u, u+c-1, 1, i);
                    u += c;
                }
            }
        }
        else{
            int ans = 31;
            for(int i=0;i<=30;++i){
                int c = get(1, 1, n, l, r, i);
                if(c == 0){
                    ans = i;
                    break;
                }
            }
            cout<<ans<<endl;
        }
    }

    return 0;
}
/**
just win today.
⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⣠⣴⣶⣿⣿⣷⣶⣄⣀⣀⠀⠀
⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⣰⣾⣿⣿⡿⢿⣿⣿⣿⣿⣿⣿⣿⣷⣦⡀⠀⠀
⠀⠀⠀⠀⠀⠀ ⠀⢀⣾⣿⣿⡟⠁⣰⣿⣿⣿⡿⠿⠻⠿⣿⣿⣿⣿⣧
⠀⠀⠀⠀⠀ ⠀⠀⣾⣿⣿⠏⠀⣴⣿⣿⣿⠉⠀⠀⠀⠀⠀⠈⢻⣿⣿⣇
⠀⠀⠀⠀  ⣠⣼⣿⣿⡏⠀⢠⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⡀
⠀⠀⠀ ⣰⣿⣿⣿⣿⣿⡇⠀⢸⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⡇
⠀⠀ ⢰⣿⣿⡿⣿⣿⣿⡇⠀⠘⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⢀⣸⣿⣿⣿⠁
⠀  ⣿⣿⣿⠁⣿⣿⣿⡇⠀⠀⠻⣿⣿⣿⣷⣶⣶⣶⣶⣶⣿⣿⣿⣿⠃
⢰⣿⣿⡇⠀⣿⣿⣿⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀
⢸⣿⣿⡇⠀⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠉⠛⠛⠛⠉⢉⣿⣿⠀⠀⠀⠀
⢸⣿⣿⣇⠀⣿⣿⣿⠀⠀⠀⠀⠀⢀⣤⣤⣤⡀⠀⠀⢸⣿⣿⣿⣷⣦⠀
⢻⣿⣿⣶⣿⣿⣿⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣦⡀⠀⠉⠉⠻⣿⣿⡇
    ⠛⠿⣿⣿⣿⣿⣷⣤⡀⠀⠀⠀⠀⠈⠹⣿⣿⣇⣀ ⣠⣾⣿⣿⡇
        ⠹⣿⣿⣿⣿⣦⣤⣤⣤⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀
            ⠉⠻⢿⣿⣿⣿⣿⣿⣿⠿⠋⠉⠛⠋⠉⠉⠁⠀
⠀                 ⠈⠉⠉⠉⠁
**/
