#include <bits/stdc++.h>
using namespace std;

int a[100005],tree[4*100000],n;
vector<int> v;

void build(int id, int l, int r){
    if(l == r){
        tree[id] = 1;
        return;
    }

    int mid = l+r >> 1;
    build(2*id,l,mid);
    build(2*id+1,mid+1,r);

    tree[id] = tree[2*id] + tree[2*id+1];
}

void update(int id, int l, int r, int i){
    if(i < l || i > r){
        return;
    }
    if(l == r){
        tree[id] = 0;
        return;
    }

    int mid = l + r >> 1;
    update(2*id,l,mid,i);
    update(2*id+1,mid+1,r,i);                  

    tree[id] = tree[2*id] + tree[2*id+1];
}

int find_k(int id,int l,int r,int k){

    if(r == l){
        return l; 
    }

    int mid = l+r >> 1;
    if(k < tree[2*id+1]){
        return find_k(2*id+1,mid+1,r,k); 
    }
    else{
        return find_k(2*id,l,mid,k - tree[2*id+1]);
    }
}


int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    // freopen("P3S2.inp","r",stdin);
    // freopen("P3S2.out","w",stdout);


    cin>>n;

    for(int i=0;i<n;i++){
        cin>>a[i];
    }

    build(1,1,n);

    for(int i=n-1;i>=0;i--){
        int f = find_k(1,1,n,a[i]);
        v.push_back(f);
        update(1,1,n,f);
    }

    for(int i=v.size()-1;i>=0;i--){
        cout<<v[i]<<' '; 
    }

    return 0;
}
